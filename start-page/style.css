@font-face {
    font-family: 'Unbounded';
    font-style: normal;
    font-weight: 200 900;
    font-display: swap;
    src: url(../fonts/Unbounded/Unbounded-VariableFont_wght.ttf) format("truetype");
    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}

* {
    font-family: "Unbounded", sans-serif;
}

:root {
    --cursor-width: 7.5vmin;
}

body {
    margin: 0;
    overflow: hidden;
    cursor: none;
    background-color: #dae0d4;
}

main {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100vh;
    width: 100%;
}

@media (orientation: landscape) {
    #project-grid {
        grid-template-columns: repeat(6, 1fr);
        grid-template-rows: repeat(3, 1fr);
    }
}

@media (orientation:portrait) {
    #project-grid {
        grid-template-columns: repeat(3, 1fr);
        grid-template-rows: repeat(6, 1fr);
    }
}

#project-grid {
    display: grid;
    width: 100%;
    height: 100%;
    align-items: center;
}

.project {
    text-align: center;
    position: relative;
}

#name {
    font-size: 1rem;
    color: #632944;
    text-align: center;
    font-weight: 500;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

.crow-icon {
    stroke: #632944;
    height: 1rem;
}



.circle {
    --circle-radius: 7.5vmin;
    position: absolute;
    width: calc(var(--circle-radius) * 2);
    height: calc(var(--circle-radius) * 2);
    border-radius: var(--circle-radius);
    top: calc(50% - var(--circle-radius));
    left: calc(50% - var(--circle-radius));
    z-index: -1;
    mix-blend-mode: multiply;
    transition: all 1s;
}

.circle-cyan {
    background-color: cyan;
    transform: translateY(-10%);
}

.circle-magenta {
    background-color: magenta;
    transform: translate(-10%, 10%);
}

.circle-yellow {
    background-color: yellow;
    transform: translate(10%, 10%);
}

a {
    text-decoration: none;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
}

a:hover {
    cursor: none;
}

a:visited {
    color: white;
}

a:hover>.circle {
    transform: scale(1.5) rotate(360deg);
}

.link-activated>.circle {
    transform: scale(50) rotate(360deg) !important;
    background-color: white !important;
    z-index: 100;
}

.link-activated {
    position: relative;
    z-index: 1;
}

.link-activated>.link>.link-text {
    opacity: 0;
    transition: opacity 0.3s;
}

.link {
    mix-blend-mode: difference;
    color: cyan;
    display: flex;
    width: 7.5vmax;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

.link-text {
    font-size: 1rem;
}

#cursor {
    width: var(--cursor-width);
    height: var(--cursor-width);
    border-radius: calc(var(--cursor-width) / 2);
    background-color: magenta;
    position: absolute;
    transform: translate(-50%, -50%);
    opacity: 0;
    mix-blend-mode: color-dodge;
}

#cursor::after,
#cursor::before {
    content: "";
    transition: opacity 0.5s, right 1s, left 1s;
    position: absolute;
    border-radius: inherit;
    mix-blend-mode: darken;
    opacity: 0;
    width: inherit !important;
    height: inherit !important;
}

#cursor::before {
    left: 0;
    background-color: cyan;
}

#cursor::after {
    right: 0;
    background-color: yellow;
}

.cursor-inside-name::after,
.cursor-inside-name::before {
    opacity: 1 !important;
}

.cursor-inside-name::before {
    left: calc(100% / 6) !important;
    background-color: cyan;
    animation-name: right-to-left;
    animation-delay: .5s;
    animation-duration: 3s;
    animation-timing-function: ease-in-out;
    animation-iteration-count: infinite;
}

.cursor-inside-name::after {
    right: calc(100% / 6) !important;
    background-color: yellow;
    animation-name: left-to-right;
    animation-delay: .5s;
    animation-duration: 3s;
    animation-timing-function: ease-in-out;
    animation-iteration-count: infinite;
}

@keyframes right-to-left {

    0%,
    100% {
        transform: translateX(0);
    }

    50% {
        transform: translateX(-50%);
    }
}

@keyframes left-to-right {
    0%,
    100% {
        transform: translateX(0);
    }

    50% {
        transform: translateX(50%);
    }
}